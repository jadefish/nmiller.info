<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Projects on nmiller.info</title><link>https://nmiller.info/projects/</link><description>Recent content in Projects on nmiller.info</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://nmiller.info/projects/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://nmiller.info/projects/alus/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nmiller.info/projects/alus/</guid><description>Project: alus Overview alus is a web application framework written in Lua. In Estonian, alus means &amp;ldquo;basis&amp;rdquo;, &amp;ldquo;base&amp;rdquo;, or &amp;ldquo;foundation&amp;rdquo;.
I have not spent much time working on alus, so it is very feature incomplete.
Structure The planned structure for alus is as follows.
Request/responses al√° symfony/http-foundation I/O via luarocks/luasocket and keplerproject/luafilesystem SQLite support via dougcurrie/lsqlite3 Environment support via moteus/environ PCRE2 support via Lrexlib Templating/views: custom Routing: custom Sessions: custom Rationale I greatly enjoy Lua.</description></item><item><title/><link>https://nmiller.info/projects/bundlereader/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nmiller.info/projects/bundlereader/</guid><description>Project: BundleReader Overview BundleReader is an inspector tool for Windows which parses and reads metadata for macOS .app bundles.
BundleReader uses a few external tools and utilities:
lipo is used for reading architecture info from app bundles&amp;rsquo; binary files. nconvert is used to convert Apple&amp;rsquo;s icon image format (.icns) to PNG. PlistCS is used for reading property lists. Unfortunately, due to data loss, BundleReader cannot be compiled in its current state: the project containing its GUI framework has been lost.</description></item><item><title/><link>https://nmiller.info/projects/colorchanger/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nmiller.info/projects/colorchanger/</guid><description>Project: ColorChanger Overview ColorChanger is a small utility for Windows which rotates through a user- defined list of opaque colors, applying each to the system&amp;rsquo;s window colorization.
ColorChanger runs unobtrusively in the system tray, displaying the current window color as its icon. It will rotate through window colors (if desired) without any input or interruption. It is written in C# and utilizes a lot of WinAPI calls.
Rationale Windows offers similar built-in functionality, but uses the current desktop wallpaper image instead of a user-selected color.</description></item><item><title/><link>https://nmiller.info/projects/filerenamer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nmiller.info/projects/filerenamer/</guid><description>Project: FileRenamer Overview FileRenamer is a small utility for Windows which provides a GUI for renaming files in a specified directory according to an array of customizable options.
FileRenamer is written in C# utilizing WinForms. It was written on Windows 8, but seems to work fine on anything supporting with .NET 4.5.
Rationale FileRenamer was written out of necessity - I had a need to rename a large number of files in a few different directories according to each file&amp;rsquo;s metadata.</description></item><item><title/><link>https://nmiller.info/projects/ladu/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nmiller.info/projects/ladu/</guid><description>Project: ladu Overview ladu is a key-value store written in C11. It utilizes libuv for its event loop and asynchronous networking and I/O. In Estonian, ladu means &amp;ldquo;storage&amp;rdquo;, &amp;ldquo;store&amp;rdquo;, or &amp;ldquo;warehouse&amp;rdquo;.
I have not spent much time working on ladu, so it currently is just a Makefile and libuv TCP echo server example.
Links ladu on Github</description></item><item><title/><link>https://nmiller.info/projects/nmiller.info/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nmiller.info/projects/nmiller.info/</guid><description>Project: nmiller.info nmiller.info is my personal website. It&amp;rsquo;s written in PHP and is built on the awesome Lumen micro-framework.
The site is hosted on a small DigitalOcean Droplet running nginx and php-fpm.
I&amp;rsquo;ve leveraged Let&amp;rsquo;s Encrypt&amp;rsquo;s free CA to ensure the site is served securely via HTTPS.
I work on the website locally using Docker, which spins up nginx and php-fpm services to emulate the &amp;ldquo;production&amp;rdquo; droplet.
Internally, the site simply renders markdown files as Blade templates, displaying them based on the current path.</description></item><item><title/><link>https://nmiller.info/projects/solarized-simple/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nmiller.info/projects/solarized-simple/</guid><description>Project: solarized-simple Overview solarized-simple is a &amp;ldquo;reduced-color&amp;rdquo; text editor theme based on the popular Solarized color scheme.
solarized-simple was originally a pair of TextMate themes (dark and light), but making adjustments to both, keeping theme files updated across workstations, and switching between editors and IDEs proved to complicate this greatly.
Now, solarized-simple is a theme generator. It currently is only capable of generating a TextMate theme compatible with TextMate, Sublime Text 3, and maybe other editors.</description></item></channel></rss>